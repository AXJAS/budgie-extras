#!/usr/bin/env python3
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
import os
import ast
import subprocess
import bhctools as bhc

# paths
dr = bhc.dr
settings = bhc.settings
# make sure config dir exists                  
try:
    os.mkdir(os.path.join(os.environ["HOME"], ".config/budgie-hotcorners"))
except FileExistsError:
    pass

# try read settings file, if it exists
try:
    state_data = ast.literal_eval(open(settings).read().strip())
except FileNotFoundError:
    # if not, drop to defaults (buttons, entries)
    states = [False, False, False, False]
    entry_data = None
else:
    states = [d[0] for d in state_data]
    entry_data = [d[1] for d in state_data]

class SettingsWindow(Gtk.Window):

    def __init__(self):

        Gtk.Window.__init__(
            self, title="Budgie Hot Corners"
            )
        maingrid = Gtk.Grid()
        maingrid.set_row_spacing(5)
        maingrid.set_column_spacing(5)
        self.add(maingrid)

        self.buttons = []; self.entries = []
        corners = ["Top-left", "Top-right", "Bottom-left", "Bottom-right"]
        # create button & entry rows
        for n in range(len(corners)):
            self.entry = Gtk.Entry()
            maingrid.attach(self.entry, 1, n, 1, 1)
            self.entries.append(self.entry)           
            self.button = Gtk.ToggleButton.new_with_label(corners[n])
            maingrid.attach(self.button, 0, n, 1, 1)
            self.buttons.append(self.button)
            self.button.connect("clicked", self.switch_entry, n)
        n_items = len(states)
        # set values
        for n in range(n_items):
            val = states[n]
            self.buttons[n].set_active(val)
            curr_entry = self.entries[n]
            curr_entry.set_sensitive(val)
            if entry_data:
                curr_entry.set_text(entry_data[n])
        # button box + button
        box = Gtk.Box()
        sep = Gtk.Grid();  sep.set_border_width(5)
        maingrid.attach(sep, 0, n+1, 1, 1)
        maingrid.attach(box, 0, n+2, 2, 1)
        done = Gtk.Button("Done")
        done.connect("clicked", self.apply)
        done.set_size_request(80, 20)
        box.pack_end(done, False, False, 0)

    def switch_entry(self, button, n):
        # toggle entry active/inactive
        subj = self.entries[n]
        state = subj.get_sensitive()
        val = False if state == True else True
        subj.set_sensitive(val)

    def apply(self, *args):
        # read set settings, save to file and restart de background script, quit
        b_states = [b.get_active() for b in self.buttons]
        cmds = [c.get_text() for c in self.entries]
        saved_state = list(zip(b_states, cmds))
        open(settings, "wt").write(str(saved_state))
        try:
            pid = bhc.get([
                "pgrep",
                "-f",
                "/opt/budgie-hotcorners/budgie-hotcorners/bhcorners",
                ]).splitlines()
        except AttributeError:
            pass
        else:
            for p in pid:
                subprocess.call(["kill", p])
        subprocess.Popen(
            "/opt/budgie-hotcorners/budgie-hotcorners/bhcorners",
            )
        Gtk.main_quit()

win = SettingsWindow()
win.connect("delete-event", Gtk.main_quit)
win.set_wmclass("Bhcorners", "bhcorners")
win.set_border_width(10)
win.set_resizable(False)
win.show_all()
Gtk.main()
