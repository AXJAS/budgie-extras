#!/usr/bin/env python3
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gdk, Pango
import subprocess
import sys
import wmovertools as wmt

button_hsize = 80; button_vsize = 50

class Splash(Gtk.Window):

    def __init__(self):
        Gtk.Window.__init__(self, title="w_moversplash")
        self.set_skip_taskbar_hint(True)
        maingrid = Gtk.Grid() 
        self.add(maingrid)
        maingrid.set_border_width(0)
        wcontext = self.get_style_context()
        wcontext.add_class("moverwindow")
        wsdata = wmt.get_wsdata()
        self.n_spaces = wsdata[0]; currspace = wsdata[1]       
        # create button- row
        if subj == "none":
            l_char = "◂ "; r_char = " ▸"
        else:
            l_char = "•"; r_char = "•"
        for n in range(self.n_spaces):
            label = l_char+str(n+1)+r_char if n == currspace else n+1
            button = Gtk.Button(label)
            st_cont = button.get_style_context()
            st_cont.add_class("moverbutton")
            button.set_size_request(button_hsize, button_vsize)
            maingrid.attach(button, n, 0, 1, 1)
            button.modify_font(Pango.FontDescription('Ubuntu 15'))
            if subj != "none":
                button.connect("clicked", self.move_to, subj, n)
            else:
                button.connect("clicked", self.move_desktop, subj, n)
        self.connect('key-press-event', self.get_key)  
        x_size = self.n_spaces*button_hsize
        self.move(x_res/2-x_size/2, y_res-180)       

    def move_to(self, button, subj, wspace):
        # print(button, subj, wspace)
        wmt.run(["wmctrl", "-ir", subj.strip(), "-t", str(wspace)])
        wmt.run(["xdotool", "windowmove", subj, "100", "100"])
        self.stop()

    def move_desktop(self, button, subj, wspace):
        wmt.run(["wmctrl", "-s", str(wspace)])
        self.stop()

    def stop(self, *args):
        Gtk.main_quit()

    def get_key(self, val1, val2 ):
        try:
            wspace = int(Gdk.keyval_name(val2.keyval))-1           
        except ValueError:
            pass
        else:
            if wspace not in range(self.n_spaces):
                pass
            else:
                self.move_to(
                    None, subj, wspace
                    ) if subj != "none" else self.move_desktop(
                        None, None, wspace
                        )
                                                            
def run_moverbar():
    # get the style from the css file and apply it
    cssProvider = Gtk.CssProvider()
    cssProvider.load_from_path(
        "/opt/budgie-extras/wmover/misc/style.css"
        )
    screen = Gdk.Screen.get_default()
    styleContext = Gtk.StyleContext()
    styleContext.add_provider_for_screen(
        screen,
        cssProvider,
        Gtk.STYLE_PROVIDER_PRIORITY_USER,
        )
    window = Splash()
    window.set_decorated(False)
    window.set_resizable(False)
    window.set_keep_above(True)
    window.set_wmclass("Wmover", "wmover")
    window.show_all()
    window.connect("destroy", Gtk.main_quit)
    Gtk.main()

if __name__ == "__main__":
    try:
        subj = sys.argv[1]
    except IndexError:
        pass
    else:
        x_res= int(sys.argv[2])
        y_res = int(sys.argv[3])
        run_moverbar()
